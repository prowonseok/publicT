//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a mozart.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Mozart.Common;
using Mozart.Collections;
using Mozart.Extensions;
using Mozart.Mapping;
using Mozart.Data;
using Mozart.Data.Entity;
using Mozart.Task.Execution;
using Mozart.Task.Execution.Persists;
using NewJenkinsTest.Inputs;
using NewJenkinsTest.Outputs;

namespace NewJenkinsTest.Persists
{
    
    /// <summary>
    /// NewJenkinsTestModel Persist Model class
    /// </summary>
    public partial class NewJenkinsTestModel_Persist : PersistModule
    {
        public override string Name
        {
            get
            {
                return "NewJenkinsTestModel";
            }
        }
        protected override void Configure()
        {
            InputPersister input = new InputPersister();
            ServiceLocator.RegisterInstance<IInputPersister> (input);
            OutputPersister output = new OutputPersister();
            ServiceLocator.RegisterInstance<IOutputPersister> (output);
        }
        /// <summary>
        /// persist context class
        /// </summary>
        internal partial class InputPersister : SAPS.Planning.Persists.SAPSInputPersister
        {
            protected override void Configure()
            {
                #region Init Config
                // Init
                this.SetParametersInfo(typeof(GlobalParameters), typeof(ConfigParameters), null, null, null, null);
                #endregion
                #region Set Property
                ThreadCount = 1;
                RetryCount = 3;
                ExceptionPolicy = PersistExceptionPolicy.LogOnly;
                #endregion
                #region Inputs Config
                // Inputs
                this.Log("Input loading");
                this.StartPerformance();
                #region * Preloading * Config
                // * Preloading *
                this.StartPreloading();
                this.StartPerformance();
                this.EndPerformance();
                this.EndPreloading();
                // * Preloading * End
                #endregion
                #region BOP Persists Config
                // BOP Persists
                this.StartPerformance();
                this.RegisterType<STD_STEP_INFO>();
                this.Load1<STD_STEP_INFO>("STD_STEP_INFO", false, true);
                this.Action("STD_STEP_INFO", null);
                this.RegisterType<STEP_ROUTE>();
                this.Load1<STEP_ROUTE>("STEP_ROUTE", false, true);
                this.Action("STEP_ROUTE", null);
                this.RegisterType<STEP_TAT>();
                this.Load1<STEP_TAT>("STEP_TAT", false, true);
                this.Action("STEP_TAT", null);
                this.RegisterType<STEP_YIELD>();
                this.Load1<STEP_YIELD>("STEP_YIELD", false, true);
                this.Action("STEP_YIELD", null);
                this.RegisterType<PROCESS>();
                this.Load1<PROCESS>("PROCESS", false, true);
                this.Action("PROCESS", null);
                this.RegisterType<PRODUCT>();
                this.Load1<PRODUCT>("PRODUCT", false, true);
                this.Action("PRODUCT", null);
                this.RegisterType<PRODUCT_ROUTE>();
                this.Load1<PRODUCT_ROUTE>("PRODUCT_ROUTE", false, true);
                this.Action("PRODUCT_ROUTE", null);
                this.EndPerformance();
                // BOP Persists End
                #endregion
                #region RESOURCE Persists Config
                // RESOURCE Persists
                this.StartPerformance();
                this.RegisterType<PRESET_INFO>();
                this.Load1<PRESET_INFO>("PRESET_INFO", false, true);
                this.Action("PRESET_INFO", null);
                this.RegisterType<EQUIPMENT>();
                this.Load1<EQUIPMENT>("EQUIPMENT", false, true);
                this.Action("EQUIPMENT", null);
                this.RegisterType<LINE_INFO>();
                this.Load1<LINE_INFO>("LINE_INFO", false, true);
                this.Action("LINE_INFO", null);
                this.RegisterType<EQP_ARRANGE>();
                this.Load1<EQP_ARRANGE>("EQP_ARRANGE", false, true);
                this.Action("EQP_ARRANGE", null);
                this.RegisterType<FACTORY_BREAK>();
                this.Load1<FACTORY_BREAK>("FACTORY_BREAK", false, true);
                this.Action("FACTORY_BREAK", null);
                this.RegisterType<PM_PLAN>();
                this.Load1<PM_PLAN>("PM_PLAN", false, true);
                this.Action("PM_PLAN", null);
                this.RegisterType<SETUP_TIME>();
                this.Load1<SETUP_TIME>("SETUP_TIME", false, true);
                this.Action("SETUP_TIME", null);
                this.RegisterType<SIMPLE_EQP_ARRANGE>();
                this.Load1<SIMPLE_EQP_ARRANGE>("SIMPLE_EQP_ARRANGE", false, true);
                this.Action("SIMPLE_EQP_ARRANGE", null);
                this.RegisterType<REPLINISH_PLAN>();
                this.Load1<REPLINISH_PLAN>("REPLINISH_PLAN", false, true);
                this.Action("REPLINISH_PLAN", null);
                this.RegisterType<MATERIAL>();
                this.Load1<MATERIAL>("MATERIAL", false, true);
                this.Action("MATERIAL", null);
                this.RegisterType<MATERIAL_BOM>();
                this.Load1<MATERIAL_BOM>("MATERIAL_BOM", false, true);
                this.Action("MATERIAL_BOM", null);
                this.RegisterType<OUT_STOCK>();
                this.Load1<OUT_STOCK>("OUT_STOCK", false, true);
                this.Action("OUT_STOCK", null);
                this.EndPerformance();
                // RESOURCE Persists End
                #endregion
                #region Target Persists Config
                // Target Persists
                this.StartPerformance();
                this.RegisterType<DEMAND>();
                this.Load1<DEMAND>("DEMAND", false, true);
                this.Action("DEMAND", null);
                this.RegisterType<WIP>();
                this.Load1<WIP>("WIP", false, true);
                this.Action("WIP", null);
                this.RegisterType<FIRM_PLAN>();
                this.Load1<FIRM_PLAN>("FIRM_PLAN", false, true);
                this.Action("FIRM_PLAN", null);
                this.EndPerformance();
                // Target Persists End
                #endregion
                #region EXECUTION Persists Config
                // EXECUTION Persists
                this.StartPerformance();
                this.RegisterType<EXECUTION_OPTION_CONFIG>();
                this.Load1<EXECUTION_OPTION_CONFIG>("EXECUTION_OPTION_CONFIG", false, true);
                this.Action("EXECUTION_OPTION_CONFIG", null);
                this.EndPerformance();
                // EXECUTION Persists End
                #endregion
                #region Simulation Persists Config
                // Simulation Persists
                this.StartPerformance();
                this.EndPerformance();
                // Simulation Persists End
                #endregion
                this.EndPerformance();
                // Inputs End
                #endregion
            }
        }
        /// <summary>
        /// persist context class
        /// </summary>
        internal partial class OutputPersister : SAPS.Planning.Persists.SAPSOutputPersister
        {
            protected override void Configure()
            {
                #region Set Property
                ThreadCount = 1;
                RetryCount = 3;
                ExceptionPolicy = PersistExceptionPolicy.StopAtThrown;
                #endregion
                #region Outputs Config
                // Outputs
                this.Log("Output saving");
                this.StartPerformance();
                #region Pegging Persists Config
                // Pegging Persists
                this.StartPerformance();
                this.RegisterType<STEP_TARGET>();
                this.Commit<STEP_TARGET>("STEP_TARGET", true, true);
                this.RegisterType<PEG_HISTORY>();
                this.Commit<PEG_HISTORY>("PEG_HISTORY", true, true);
                this.RegisterType<UNPEG_HISTORY>();
                this.Commit<UNPEG_HISTORY>("UNPEG_HISTORY", true, true);
                this.RegisterType<INPUT_PLAN>();
                this.Commit<INPUT_PLAN>("INPUT_PLAN", true, true);
                this.EndPerformance();
                // Pegging Persists End
                #endregion
                #region Log Persists Config
                // Log Persists
                this.StartPerformance();
                this.RegisterType<ERROR_LOG>();
                this.Commit<ERROR_LOG>("ERROR_LOG", true, true);
                this.EndPerformance();
                // Log Persists End
                #endregion
                #region Simulation Persists Config
                // Simulation Persists
                this.StartPerformance();
                this.RegisterType<EQP_DISPATCH_LOG>();
                this.Commit<EQP_DISPATCH_LOG>("EQP_DISPATCH_LOG", true, true);
                this.RegisterType<EQP_PLAN>();
                this.Commit<EQP_PLAN>("EQP_PLAN", true, true);
                this.RegisterType<LOAD_STAT>();
                this.Commit<LOAD_STAT>("LOAD_STAT", true, true);
                this.RegisterType<LOAD_HISTORY>();
                this.Commit<LOAD_HISTORY>("LOAD_HISTORY", true, true);
                this.RegisterType<RELEASE_HISTORY>();
                this.Commit<RELEASE_HISTORY>("RELEASE_HISTORY", true, true);
                this.RegisterType<STEP_WIP>();
                this.Commit<STEP_WIP>("STEP_WIP", true, true);
                this.RegisterType<UNKIT_REMAIN_WIPLOG>();
                this.Commit<UNKIT_REMAIN_WIPLOG>("UNKIT_REMAIN_WIPLOG", true, true);
                this.RegisterType<MERGE_WIPLOG>();
                this.Commit<MERGE_WIPLOG>("MERGE_WIPLOG", true, true);
                this.RegisterType<MATERIAL_HISTORY>();
                this.Commit<MATERIAL_HISTORY>("MATERIAL_HISTORY", true, true);
                this.EndPerformance();
                // Simulation Persists End
                #endregion
                this.EndPerformance();
                // Outputs End
                #endregion
            }
        }
    }
}
